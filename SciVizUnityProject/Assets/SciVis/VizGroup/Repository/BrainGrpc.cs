// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: brain.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Brain {
  /// <summary>
  ///
  /// The brain service have methods for requesting the data in the network.
  /// All methods for neurons and synapses in the network are accessed through this service.
  /// </summary>
  public static partial class Brain
  {
    static readonly string __ServiceName = "brain.Brain";

    static readonly grpc::Marshaller<global::Brain.NeuronsQuery> __Marshaller_brain_NeuronsQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.NeuronsQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.GenericNeuron> __Marshaller_brain_GenericNeuron = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.GenericNeuron.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.StratumQuery> __Marshaller_brain_StratumQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.StratumQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.Node> __Marshaller_brain_Node = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.Node.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.AllSynapsesQuery> __Marshaller_brain_AllSynapsesQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.AllSynapsesQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.Synapse> __Marshaller_brain_Synapse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.Synapse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.DeltaSynapsesQuery> __Marshaller_brain_DeltaSynapsesQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.DeltaSynapsesQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.ClustersQuery> __Marshaller_brain_ClustersQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.ClustersQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.Cluster> __Marshaller_brain_Cluster = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.Cluster.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.ClusterEdgesQuery> __Marshaller_brain_ClusterEdgesQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.ClusterEdgesQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.ClusterEdge> __Marshaller_brain_ClusterEdge = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.ClusterEdge.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.NodesInClusterQuery> __Marshaller_brain_NodesInClusterQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.NodesInClusterQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.EdgesInClusterQuery> __Marshaller_brain_EdgesInClusterQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.EdgesInClusterQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.LeavesQuery> __Marshaller_brain_LeavesQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.LeavesQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.BillboardQuery> __Marshaller_brain_BillboardQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.BillboardQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.Pip> __Marshaller_brain_Pip = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.Pip.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.PipsQuery> __Marshaller_brain_PipsQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.PipsQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.SplinesQuery> __Marshaller_brain_SplinesQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.SplinesQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Brain.Spline> __Marshaller_brain_Spline = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Brain.Spline.Parser.ParseFrom);

    static readonly grpc::Method<global::Brain.NeuronsQuery, global::Brain.GenericNeuron> __Method_NeuronsStream = new grpc::Method<global::Brain.NeuronsQuery, global::Brain.GenericNeuron>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NeuronsStream",
        __Marshaller_brain_NeuronsQuery,
        __Marshaller_brain_GenericNeuron);

    static readonly grpc::Method<global::Brain.StratumQuery, global::Brain.Node> __Method_Stratum = new grpc::Method<global::Brain.StratumQuery, global::Brain.Node>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Stratum",
        __Marshaller_brain_StratumQuery,
        __Marshaller_brain_Node);

    static readonly grpc::Method<global::Brain.AllSynapsesQuery, global::Brain.Synapse> __Method_AllSynapsesStream = new grpc::Method<global::Brain.AllSynapsesQuery, global::Brain.Synapse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AllSynapsesStream",
        __Marshaller_brain_AllSynapsesQuery,
        __Marshaller_brain_Synapse);

    static readonly grpc::Method<global::Brain.DeltaSynapsesQuery, global::Brain.Synapse> __Method_DeltaSynapsesStream = new grpc::Method<global::Brain.DeltaSynapsesQuery, global::Brain.Synapse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "DeltaSynapsesStream",
        __Marshaller_brain_DeltaSynapsesQuery,
        __Marshaller_brain_Synapse);

    static readonly grpc::Method<global::Brain.ClustersQuery, global::Brain.Cluster> __Method_Clusters = new grpc::Method<global::Brain.ClustersQuery, global::Brain.Cluster>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Clusters",
        __Marshaller_brain_ClustersQuery,
        __Marshaller_brain_Cluster);

    static readonly grpc::Method<global::Brain.ClusterEdgesQuery, global::Brain.ClusterEdge> __Method_ClusterEdges = new grpc::Method<global::Brain.ClusterEdgesQuery, global::Brain.ClusterEdge>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ClusterEdges",
        __Marshaller_brain_ClusterEdgesQuery,
        __Marshaller_brain_ClusterEdge);

    static readonly grpc::Method<global::Brain.NodesInClusterQuery, global::Brain.Cluster> __Method_NodesInCluster = new grpc::Method<global::Brain.NodesInClusterQuery, global::Brain.Cluster>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NodesInCluster",
        __Marshaller_brain_NodesInClusterQuery,
        __Marshaller_brain_Cluster);

    static readonly grpc::Method<global::Brain.EdgesInClusterQuery, global::Brain.ClusterEdge> __Method_EdgesInCluster = new grpc::Method<global::Brain.EdgesInClusterQuery, global::Brain.ClusterEdge>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "EdgesInCluster",
        __Marshaller_brain_EdgesInClusterQuery,
        __Marshaller_brain_ClusterEdge);

    static readonly grpc::Method<global::Brain.LeavesQuery, global::Brain.GenericNeuron> __Method_Leaves = new grpc::Method<global::Brain.LeavesQuery, global::Brain.GenericNeuron>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Leaves",
        __Marshaller_brain_LeavesQuery,
        __Marshaller_brain_GenericNeuron);

    static readonly grpc::Method<global::Brain.BillboardQuery, global::Brain.Pip> __Method_Billboard = new grpc::Method<global::Brain.BillboardQuery, global::Brain.Pip>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Billboard",
        __Marshaller_brain_BillboardQuery,
        __Marshaller_brain_Pip);

    static readonly grpc::Method<global::Brain.PipsQuery, global::Brain.Pip> __Method_Pips = new grpc::Method<global::Brain.PipsQuery, global::Brain.Pip>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Pips",
        __Marshaller_brain_PipsQuery,
        __Marshaller_brain_Pip);

    static readonly grpc::Method<global::Brain.SplinesQuery, global::Brain.Spline> __Method_Splines = new grpc::Method<global::Brain.SplinesQuery, global::Brain.Spline>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Splines",
        __Marshaller_brain_SplinesQuery,
        __Marshaller_brain_Spline);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Brain.BrainReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Brain</summary>
    [grpc::BindServiceMethod(typeof(Brain), "BindService")]
    public abstract partial class BrainBase
    {
      public virtual global::System.Threading.Tasks.Task NeuronsStream(global::Brain.NeuronsQuery request, grpc::IServerStreamWriter<global::Brain.GenericNeuron> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Stratum(global::Brain.StratumQuery request, grpc::IServerStreamWriter<global::Brain.Node> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AllSynapsesStream(global::Brain.AllSynapsesQuery request, grpc::IServerStreamWriter<global::Brain.Synapse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream of all synapses that changed between timestep1 and timestep2. Concecutive timesteps are precomputed and much faster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task DeltaSynapsesStream(global::Brain.DeltaSynapsesQuery request, grpc::IServerStreamWriter<global::Brain.Synapse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream of clusters at specified granularity and timestep
      /// Kind of deprecated, stratum does the same thing
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Clusters(global::Brain.ClustersQuery request, grpc::IServerStreamWriter<global::Brain.Cluster> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream of edges between clusters at specified granularity and timestep
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ClusterEdges(global::Brain.ClusterEdgesQuery request, grpc::IServerStreamWriter<global::Brain.ClusterEdge> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream of children nodes of a cluster from a given granularity
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task NodesInCluster(global::Brain.NodesInClusterQuery request, grpc::IServerStreamWriter<global::Brain.Cluster> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream of edges inside a cluster from a given granularity
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task EdgesInCluster(global::Brain.EdgesInClusterQuery request, grpc::IServerStreamWriter<global::Brain.ClusterEdge> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream neuron leaves assigned to the specified cluster at the specified granularity level
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Leaves(global::Brain.LeavesQuery request, grpc::IServerStreamWriter<global::Brain.GenericNeuron> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// first sends average, then max then min
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Billboard(global::Brain.BillboardQuery request, grpc::IServerStreamWriter<global::Brain.Pip> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Pips(global::Brain.PipsQuery request, grpc::IServerStreamWriter<global::Brain.Pip> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Splines(global::Brain.SplinesQuery request, grpc::IServerStreamWriter<global::Brain.Spline> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Brain</summary>
    public partial class BrainClient : grpc::ClientBase<BrainClient>
    {
      /// <summary>Creates a new client for Brain</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BrainClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Brain that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BrainClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BrainClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BrainClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Brain.GenericNeuron> NeuronsStream(global::Brain.NeuronsQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NeuronsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.GenericNeuron> NeuronsStream(global::Brain.NeuronsQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NeuronsStream, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Node> Stratum(global::Brain.StratumQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stratum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Node> Stratum(global::Brain.StratumQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Stratum, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Synapse> AllSynapsesStream(global::Brain.AllSynapsesQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllSynapsesStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Synapse> AllSynapsesStream(global::Brain.AllSynapsesQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AllSynapsesStream, null, options, request);
      }
      /// <summary>
      /// Stream of all synapses that changed between timestep1 and timestep2. Concecutive timesteps are precomputed and much faster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Synapse> DeltaSynapsesStream(global::Brain.DeltaSynapsesQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeltaSynapsesStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream of all synapses that changed between timestep1 and timestep2. Concecutive timesteps are precomputed and much faster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Synapse> DeltaSynapsesStream(global::Brain.DeltaSynapsesQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_DeltaSynapsesStream, null, options, request);
      }
      /// <summary>
      /// Stream of clusters at specified granularity and timestep
      /// Kind of deprecated, stratum does the same thing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Cluster> Clusters(global::Brain.ClustersQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Clusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream of clusters at specified granularity and timestep
      /// Kind of deprecated, stratum does the same thing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Cluster> Clusters(global::Brain.ClustersQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Clusters, null, options, request);
      }
      /// <summary>
      /// Stream of edges between clusters at specified granularity and timestep
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.ClusterEdge> ClusterEdges(global::Brain.ClusterEdgesQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClusterEdges(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream of edges between clusters at specified granularity and timestep
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.ClusterEdge> ClusterEdges(global::Brain.ClusterEdgesQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ClusterEdges, null, options, request);
      }
      /// <summary>
      /// Stream of children nodes of a cluster from a given granularity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Cluster> NodesInCluster(global::Brain.NodesInClusterQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodesInCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream of children nodes of a cluster from a given granularity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Cluster> NodesInCluster(global::Brain.NodesInClusterQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NodesInCluster, null, options, request);
      }
      /// <summary>
      /// Stream of edges inside a cluster from a given granularity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.ClusterEdge> EdgesInCluster(global::Brain.EdgesInClusterQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EdgesInCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream of edges inside a cluster from a given granularity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.ClusterEdge> EdgesInCluster(global::Brain.EdgesInClusterQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_EdgesInCluster, null, options, request);
      }
      /// <summary>
      /// Stream neuron leaves assigned to the specified cluster at the specified granularity level
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.GenericNeuron> Leaves(global::Brain.LeavesQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Leaves(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream neuron leaves assigned to the specified cluster at the specified granularity level
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.GenericNeuron> Leaves(global::Brain.LeavesQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Leaves, null, options, request);
      }
      /// <summary>
      /// first sends average, then max then min
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Pip> Billboard(global::Brain.BillboardQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Billboard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// first sends average, then max then min
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Pip> Billboard(global::Brain.BillboardQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Billboard, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Pip> Pips(global::Brain.PipsQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Pips(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Pip> Pips(global::Brain.PipsQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Pips, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Spline> Splines(global::Brain.SplinesQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Splines(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Brain.Spline> Splines(global::Brain.SplinesQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Splines, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BrainClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BrainClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BrainBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_NeuronsStream, serviceImpl.NeuronsStream)
          .AddMethod(__Method_Stratum, serviceImpl.Stratum)
          .AddMethod(__Method_AllSynapsesStream, serviceImpl.AllSynapsesStream)
          .AddMethod(__Method_DeltaSynapsesStream, serviceImpl.DeltaSynapsesStream)
          .AddMethod(__Method_Clusters, serviceImpl.Clusters)
          .AddMethod(__Method_ClusterEdges, serviceImpl.ClusterEdges)
          .AddMethod(__Method_NodesInCluster, serviceImpl.NodesInCluster)
          .AddMethod(__Method_EdgesInCluster, serviceImpl.EdgesInCluster)
          .AddMethod(__Method_Leaves, serviceImpl.Leaves)
          .AddMethod(__Method_Billboard, serviceImpl.Billboard)
          .AddMethod(__Method_Pips, serviceImpl.Pips)
          .AddMethod(__Method_Splines, serviceImpl.Splines).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BrainBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_NeuronsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.NeuronsQuery, global::Brain.GenericNeuron>(serviceImpl.NeuronsStream));
      serviceBinder.AddMethod(__Method_Stratum, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.StratumQuery, global::Brain.Node>(serviceImpl.Stratum));
      serviceBinder.AddMethod(__Method_AllSynapsesStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.AllSynapsesQuery, global::Brain.Synapse>(serviceImpl.AllSynapsesStream));
      serviceBinder.AddMethod(__Method_DeltaSynapsesStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.DeltaSynapsesQuery, global::Brain.Synapse>(serviceImpl.DeltaSynapsesStream));
      serviceBinder.AddMethod(__Method_Clusters, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.ClustersQuery, global::Brain.Cluster>(serviceImpl.Clusters));
      serviceBinder.AddMethod(__Method_ClusterEdges, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.ClusterEdgesQuery, global::Brain.ClusterEdge>(serviceImpl.ClusterEdges));
      serviceBinder.AddMethod(__Method_NodesInCluster, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.NodesInClusterQuery, global::Brain.Cluster>(serviceImpl.NodesInCluster));
      serviceBinder.AddMethod(__Method_EdgesInCluster, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.EdgesInClusterQuery, global::Brain.ClusterEdge>(serviceImpl.EdgesInCluster));
      serviceBinder.AddMethod(__Method_Leaves, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.LeavesQuery, global::Brain.GenericNeuron>(serviceImpl.Leaves));
      serviceBinder.AddMethod(__Method_Billboard, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.BillboardQuery, global::Brain.Pip>(serviceImpl.Billboard));
      serviceBinder.AddMethod(__Method_Pips, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.PipsQuery, global::Brain.Pip>(serviceImpl.Pips));
      serviceBinder.AddMethod(__Method_Splines, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Brain.SplinesQuery, global::Brain.Spline>(serviceImpl.Splines));
    }

  }
}
#endregion
