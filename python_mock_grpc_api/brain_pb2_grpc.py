# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import brain_pb2 as brain__pb2


class BrainStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AllNeurons = channel.unary_unary(
                '/protos.Brain/AllNeurons',
                request_serializer=brain__pb2.AllNeuronsQuery.SerializeToString,
                response_deserializer=brain__pb2.NeuronReply.FromString,
                )
        self.AllSynapses = channel.unary_unary(
                '/protos.Brain/AllSynapses',
                request_serializer=brain__pb2.AllSynapsesQuery.SerializeToString,
                response_deserializer=brain__pb2.SynapseReply.FromString,
                )


class BrainServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AllNeurons(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllSynapses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AllNeurons': grpc.unary_unary_rpc_method_handler(
                    servicer.AllNeurons,
                    request_deserializer=brain__pb2.AllNeuronsQuery.FromString,
                    response_serializer=brain__pb2.NeuronReply.SerializeToString,
            ),
            'AllSynapses': grpc.unary_unary_rpc_method_handler(
                    servicer.AllSynapses,
                    request_deserializer=brain__pb2.AllSynapsesQuery.FromString,
                    response_serializer=brain__pb2.SynapseReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protos.Brain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Brain(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AllNeurons(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.Brain/AllNeurons',
            brain__pb2.AllNeuronsQuery.SerializeToString,
            brain__pb2.NeuronReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllSynapses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.Brain/AllSynapses',
            brain__pb2.AllSynapsesQuery.SerializeToString,
            brain__pb2.SynapseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
